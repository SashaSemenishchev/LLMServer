/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: protocol/client.proto */

#ifndef PROTOBUF_C_protocol_2fclient_2eproto__INCLUDED
#define PROTOBUF_C_protocol_2fclient_2eproto__INCLUDED

#include "protobuf-c/protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct AiClient__AvailablePresetPromptsRequest AiClient__AvailablePresetPromptsRequest;
typedef struct AiClient__AskForCompletion AiClient__AskForCompletion;
typedef struct AiClient__TerminateCompletion AiClient__TerminateCompletion;


/* --- enums --- */


/* --- messages --- */

struct  AiClient__AvailablePresetPromptsRequest
{
  ProtobufCMessage base;
  char *askid;
};
#define AI_CLIENT__AVAILABLE_PRESET_PROMPTS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ai_client__available_preset_prompts_request__descriptor) \
, NULL }


struct  AiClient__AskForCompletion
{
  ProtobufCMessage base;
  char *askid;
  char *prompt;
  char *baseprompt;
  char *suffix;
  /*
   * generation values
   */
  protobuf_c_boolean has_maxtokens;
  int32_t maxtokens;
  size_t n_stoptokens;
  char **stoptokens;
  protobuf_c_boolean has_temperature;
  float temperature;
  protobuf_c_boolean has_stream;
  protobuf_c_boolean stream;
};
#define AI_CLIENT__ASK_FOR_COMPLETION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ai_client__ask_for_completion__descriptor) \
, NULL, NULL, NULL, NULL, 0, 0, 0,NULL, 0, 0, 0, 0 }


struct  AiClient__TerminateCompletion
{
  ProtobufCMessage base;
  char *completionid;
};
#define AI_CLIENT__TERMINATE_COMPLETION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ai_client__terminate_completion__descriptor) \
, NULL }


/* AiClient__AvailablePresetPromptsRequest methods */
void   ai_client__available_preset_prompts_request__init
                     (AiClient__AvailablePresetPromptsRequest         *message);
size_t ai_client__available_preset_prompts_request__get_packed_size
                     (const AiClient__AvailablePresetPromptsRequest   *message);
size_t ai_client__available_preset_prompts_request__pack
                     (const AiClient__AvailablePresetPromptsRequest   *message,
                      uint8_t             *out);
size_t ai_client__available_preset_prompts_request__pack_to_buffer
                     (const AiClient__AvailablePresetPromptsRequest   *message,
                      ProtobufCBuffer     *buffer);
AiClient__AvailablePresetPromptsRequest *
       ai_client__available_preset_prompts_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ai_client__available_preset_prompts_request__free_unpacked
                     (AiClient__AvailablePresetPromptsRequest *message,
                      ProtobufCAllocator *allocator);
/* AiClient__AskForCompletion methods */
void   ai_client__ask_for_completion__init
                     (AiClient__AskForCompletion         *message);
size_t ai_client__ask_for_completion__get_packed_size
                     (const AiClient__AskForCompletion   *message);
size_t ai_client__ask_for_completion__pack
                     (const AiClient__AskForCompletion   *message,
                      uint8_t             *out);
size_t ai_client__ask_for_completion__pack_to_buffer
                     (const AiClient__AskForCompletion   *message,
                      ProtobufCBuffer     *buffer);
AiClient__AskForCompletion *
       ai_client__ask_for_completion__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ai_client__ask_for_completion__free_unpacked
                     (AiClient__AskForCompletion *message,
                      ProtobufCAllocator *allocator);
/* AiClient__TerminateCompletion methods */
void   ai_client__terminate_completion__init
                     (AiClient__TerminateCompletion         *message);
size_t ai_client__terminate_completion__get_packed_size
                     (const AiClient__TerminateCompletion   *message);
size_t ai_client__terminate_completion__pack
                     (const AiClient__TerminateCompletion   *message,
                      uint8_t             *out);
size_t ai_client__terminate_completion__pack_to_buffer
                     (const AiClient__TerminateCompletion   *message,
                      ProtobufCBuffer     *buffer);
AiClient__TerminateCompletion *
       ai_client__terminate_completion__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ai_client__terminate_completion__free_unpacked
                     (AiClient__TerminateCompletion *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*AiClient__AvailablePresetPromptsRequest_Closure)
                 (const AiClient__AvailablePresetPromptsRequest *message,
                  void *closure_data);
typedef void (*AiClient__AskForCompletion_Closure)
                 (const AiClient__AskForCompletion *message,
                  void *closure_data);
typedef void (*AiClient__TerminateCompletion_Closure)
                 (const AiClient__TerminateCompletion *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor ai_client__available_preset_prompts_request__descriptor;
extern const ProtobufCMessageDescriptor ai_client__ask_for_completion__descriptor;
extern const ProtobufCMessageDescriptor ai_client__terminate_completion__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_protocol_2fclient_2eproto__INCLUDED */
